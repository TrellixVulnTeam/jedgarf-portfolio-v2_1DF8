{"ast":null,"code":"import SequentialIDGenerator from \"./sequential-id-generator\";\nimport sortMq from \"./sort-css-media-queries\";\nexport class MultiCache {\n  constructor(idGenerator, onNewCache, onNewValue) {\n    this.idGenerator = idGenerator;\n    this.onNewCache = onNewCache;\n    this.onNewValue = onNewValue;\n    this.sortedCacheKeys = [];\n    this.caches = {};\n  }\n\n  getCache(key) {\n    if (!this.caches[key]) {\n      const cache = new Cache(this.idGenerator, this.onNewValue);\n      cache.key = key;\n      this.sortedCacheKeys.push(key);\n      this.sortedCacheKeys.sort(sortMq);\n      const keyIndex = this.sortedCacheKeys.indexOf(key);\n      const insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;\n      this.caches[key] = cache;\n      this.onNewCache(key, cache, insertBeforeMedia);\n    }\n\n    return this.caches[key];\n  }\n\n  getSortedCacheKeys() {\n    return this.sortedCacheKeys;\n  }\n\n}\nexport class Cache {\n  constructor(idGenerator, onNewValue) {\n    this.cache = {};\n    this.idGenerator = idGenerator;\n    this.onNewValue = onNewValue;\n  }\n\n  addValue(key, value) {\n    const cached = this.cache[key];\n\n    if (cached) {\n      return cached;\n    }\n\n    const id = this.idGenerator.next();\n    this.cache[key] = id;\n    this.onNewValue(this, id, value);\n    return id;\n  }\n\n}","map":{"version":3,"sources":["src/cache.ts"],"names":["constructor","getCache","cache","keyIndex","insertBeforeMedia","getSortedCacheKeys","addValue","cached","id"],"mappings":"AAAA,OAAA,qBAAA,MAAA,2BAAA;AACA,OAAA,MAAA,MAAA,0BAAA;AASA,OAAO,MAAA,UAAA,CAAoB;EASzBA,WAAW,CAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAIT;IACA,KAAA,WAAA,GAAA,WAAA;IACA,KAAA,UAAA,GAAA,UAAA;IACA,KAAA,UAAA,GAAA,UAAA;IACA,KAAA,eAAA,GAAA,EAAA;IACA,KAAA,MAAA,GAAA,EAAA;EACD;;EAEDC,QAAQ,CAAA,GAAA,EAAwB;IAC9B,IAAI,CAAC,KAAA,MAAA,CAAL,GAAK,CAAL,EAAuB;MACrB,MAAMC,KAAK,GAAG,IAAA,KAAA,CAAU,KAAV,WAAA,EAA4B,KAA1C,UAAc,CAAd;MACAA,KAAK,CAALA,GAAAA,GAAAA,GAAAA;MACA,KAAA,eAAA,CAAA,IAAA,CAAA,GAAA;MACA,KAAA,eAAA,CAAA,IAAA,CAAA,MAAA;MACA,MAAMC,QAAQ,GAAG,KAAA,eAAA,CAAA,OAAA,CAAjB,GAAiB,CAAjB;MACA,MAAMC,iBAAiB,GACrBD,QAAQ,GAAG,KAAA,eAAA,CAAA,MAAA,GAAXA,CAAAA,GACI,KAAA,eAAA,CAAqBA,QAAQ,GADjCA,CACI,CADJA,GAEI,KAHN,CAAA;MAIA,KAAA,MAAA,CAAA,GAAA,IAAA,KAAA;MACA,KAAA,UAAA,CAAA,GAAA,EAAA,KAAA,EAAA,iBAAA;IACD;;IACD,OAAO,KAAA,MAAA,CAAP,GAAO,CAAP;EACD;;EAEDE,kBAAkB,GAAG;IACnB,OAAO,KAAP,eAAA;EACD;;AAxCwB;AA2C3B,OAAO,MAAA,KAAA,CAAe;EAQpBL,WAAW,CAAA,WAAA,EAAA,UAAA,EAGT;IACA,KAAA,KAAA,GAAA,EAAA;IACA,KAAA,WAAA,GAAA,WAAA;IACA,KAAA,UAAA,GAAA,UAAA;EACD;;EAEDM,QAAQ,CAAA,GAAA,EAAA,KAAA,EAAwB;IAC9B,MAAMC,MAAM,GAAG,KAAA,KAAA,CAAf,GAAe,CAAf;;IACA,IAAA,MAAA,EAAY;MACV,OAAA,MAAA;IACD;;IACD,MAAMC,EAAE,GAAG,KAAA,WAAA,CAAX,IAAW,EAAX;IACA,KAAA,KAAA,CAAA,GAAA,IAAA,EAAA;IACA,KAAA,UAAA,CAAA,IAAA,EAAA,EAAA,EAAA,KAAA;IACA,OAAA,EAAA;EACD;;AA1BmB","sourcesContent":["import SequentialIDGenerator from \"./sequential-id-generator\";\nimport sortMq from \"./sort-css-media-queries\";\n\ntype OnNewCacheFn<T> = (\n  key: string,\n  cache: Cache<T>,\n  value?: string | null,\n) => any;\ntype OnNewValueFn<T> = (cache: Cache<T>, id: string, value: T) => any;\n\nexport class MultiCache<T> {\n  caches: {\n    [x: string]: Cache<T>;\n  };\n  idGenerator: SequentialIDGenerator;\n  onNewCache: OnNewCacheFn<T>;\n  onNewValue: OnNewValueFn<T>;\n  sortedCacheKeys: string[];\n\n  constructor(\n    idGenerator: SequentialIDGenerator,\n    onNewCache: OnNewCacheFn<T>,\n    onNewValue: OnNewValueFn<T>,\n  ) {\n    this.idGenerator = idGenerator;\n    this.onNewCache = onNewCache;\n    this.onNewValue = onNewValue;\n    this.sortedCacheKeys = [];\n    this.caches = {};\n  }\n\n  getCache(key: string): Cache<T> {\n    if (!this.caches[key]) {\n      const cache = new Cache(this.idGenerator, this.onNewValue);\n      cache.key = key;\n      this.sortedCacheKeys.push(key);\n      this.sortedCacheKeys.sort(sortMq);\n      const keyIndex = this.sortedCacheKeys.indexOf(key);\n      const insertBeforeMedia =\n        keyIndex < this.sortedCacheKeys.length - 1\n          ? this.sortedCacheKeys[keyIndex + 1]\n          : void 0;\n      this.caches[key] = cache;\n      this.onNewCache(key, cache, insertBeforeMedia);\n    }\n    return this.caches[key];\n  }\n\n  getSortedCacheKeys() {\n    return this.sortedCacheKeys;\n  }\n}\n\nexport class Cache<T> {\n  cache: {\n    [x: string]: string;\n  };\n  idGenerator: SequentialIDGenerator;\n  key: string;\n  onNewValue: (cache: Cache<T>, id: string, value: any) => any;\n\n  constructor(\n    idGenerator: SequentialIDGenerator,\n    onNewValue: (cache: Cache<T>, id: string, value: any) => any,\n  ) {\n    this.cache = {};\n    this.idGenerator = idGenerator;\n    this.onNewValue = onNewValue;\n  }\n\n  addValue(key: string, value: T) {\n    const cached = this.cache[key];\n    if (cached) {\n      return cached;\n    }\n    const id = this.idGenerator.next();\n    this.cache[key] = id;\n    this.onNewValue(this, id, value);\n    return id;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}