{"ast":null,"code":"import hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\nexport function atomicSelector(id, pseudo) {\n  let selector = `.${id}`;\n\n  if (pseudo) {\n    selector += pseudo;\n  }\n\n  return selector;\n}\nexport function keyframesToBlock(keyframes) {\n  if (process.env.NODE_ENV !== \"production\") {\n    validateKeyframesObject(keyframes);\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Only plain objects should be used as animation values. Unexpectedly recieved:\", keyframes);\n    }\n  }\n\n  let result = \"\";\n\n  for (const animationState in keyframes) {\n    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;\n  }\n\n  return result;\n}\nexport function declarationsToBlock(style) {\n  let css = \"\";\n\n  for (const prop in style) {\n    const val = style[prop];\n\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += `${hyphenate(prop)}:${val};`;\n    }\n  } // trim trailing semicolon\n\n\n  return css.slice(0, -1);\n}\nexport function keyframesBlockToRule(id, block) {\n  return `@keyframes ${id}{${block}}`;\n}\nexport function fontFaceBlockToRule(id, block) {\n  return `@font-face{font-family:${id};${block}}`;\n}\nexport function styleBlockToRule(selector, block) {\n  return `${selector}{${block}}`;\n}","map":{"version":3,"sources":["src/css.ts"],"names":["selector","id","validateKeyframesObject","Object","console","result","animationState","declarationsToBlock","keyframes","css","val","style","hyphenate","block"],"mappings":"AAEA,OAAA,SAAA,MAAA,wBAAA;AACA,OAAA,uBAAA,MAAA,6BAAA;AAEA,OAAO,SAAA,cAAA,CAAA,EAAA,EAAA,MAAA,EAA4D;EACjE,IAAIA,QAAQ,GAAI,IAAGC,EAAnB,EAAA;;EACA,IAAA,MAAA,EAAY;IACVD,QAAQ,IAARA,MAAAA;EACD;;EACD,OAAA,QAAA;AACD;AAED,OAAO,SAAA,gBAAA,CAAA,SAAA,EAAiE;EACtE,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;IACXE,uBAAuB,CAAvBA,SAAuB,CAAvBA;EACD;;EACD,IAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAW,OAAOC,MAAM,CAANA,cAAAA,CAAP,SAAOA,CAAP,KAAf,WAAA,EAAwE;IACtE,IAAIA,MAAM,CAANA,cAAAA,CAAAA,SAAAA,MAAqCA,MAAM,CAANA,cAAAA,CAAzC,EAAyCA,CAAzC,EAAoE;MAClE;MACAC,OAAO,CAAPA,IAAAA,CAAAA,+EAAAA,EAAAA,SAAAA;IAID;EACF;;EACD,IAAIC,MAAM,GAAV,EAAA;;EACA,KAAK,MAAL,cAAA,IAAA,SAAA,EAAwC;IACtCA,MAAM,IAAK,GAAEC,cAAe,IAAGC,mBAAmB,CAChDC,SAAS,CADuC,cACvC,CADuC,CAAlDH,GAAAA;EAGD;;EACD,OAAA,MAAA;AACD;AAED,OAAO,SAAA,mBAAA,CAAA,KAAA,EAAiD;EACtD,IAAII,GAAG,GAAP,EAAA;;EACA,KAAK,MAAL,IAAA,IAAA,KAAA,EAA0B;IACxB,MAAMC,GAAG,GAAGC,KAAK,CAAjB,IAAiB,CAAjB;;IACA,IAAI,OAAA,GAAA,KAAA,QAAA,IAA2B,OAAA,GAAA,KAA/B,QAAA,EAAwD;MACtDF,GAAG,IAAK,GAAEG,SAAS,CAAA,IAAA,CAAO,IAAGF,GAA7BD,GAAAA;IACD;EANmD,CAAA,CAQtD;;;EACA,OAAOA,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAa,CAApB,CAAOA,CAAP;AACD;AAED,OAAO,SAAA,oBAAA,CAAA,EAAA,EAAA,KAAA,EAAiE;EACtE,OAAQ,cAAaR,EAAG,IAAGY,KAA3B,GAAA;AACD;AAED,OAAO,SAAA,mBAAA,CAAA,EAAA,EAAA,KAAA,EAAgE;EACrE,OAAQ,0BAAyBZ,EAAG,IAAGY,KAAvC,GAAA;AACD;AAED,OAAO,SAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,EAAmE;EACxE,OAAQ,GAAEb,QAAS,IAAGa,KAAtB,GAAA;AACD","sourcesContent":["declare var __DEV__: boolean;\n\nimport hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\n\nexport function atomicSelector(id: string, pseudo: string): string {\n  let selector = `.${id}`;\n  if (pseudo) {\n    selector += pseudo;\n  }\n  return selector;\n}\n\nexport function keyframesToBlock(keyframes: {[x: string]: any}): string {\n  if (__DEV__) {\n    validateKeyframesObject(keyframes);\n  }\n  if (__DEV__ && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Only plain objects should be used as animation values. Unexpectedly recieved:\",\n        keyframes,\n      );\n    }\n  }\n  let result = \"\";\n  for (const animationState in keyframes) {\n    result += `${animationState}{${declarationsToBlock(\n      keyframes[animationState],\n    )}}`;\n  }\n  return result;\n}\n\nexport function declarationsToBlock(style: any): string {\n  let css = \"\";\n  for (const prop in style) {\n    const val = style[prop];\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += `${hyphenate(prop)}:${val};`;\n    }\n  }\n  // trim trailing semicolon\n  return css.slice(0, -1);\n}\n\nexport function keyframesBlockToRule(id: string, block: string): string {\n  return `@keyframes ${id}{${block}}`;\n}\n\nexport function fontFaceBlockToRule(id: string, block: string): string {\n  return `@font-face{font-family:${id};${block}}`;\n}\n\nexport function styleBlockToRule(selector: string, block: string): string {\n  return `${selector}{${block}}`;\n}\n"]},"metadata":{},"sourceType":"module"}