{"ast":null,"code":"export function driver(style, styletron) {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\nexport function getInitialStyle() {\n  return {};\n}\nexport function renderDeclarativeRules(style, styletron) {\n  for (const key in style) {\n    const val = style[key];\n\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val);\n      continue;\n    }\n\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace(font)},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val);\n        continue;\n      }\n    }\n\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n\n  return style;\n}","map":{"version":3,"sources":["src/index.ts"],"names":["tx","renderDeclarativeRules","styletron","val","style","key","Array","result","font"],"mappings":"AAkBA,OAAO,SAAA,MAAA,CAAA,KAAA,EAAA,SAAA,EAAuE;EAC5E,MAAMA,EAAE,GAAGC,sBAAsB,CAAA,KAAA,EAAjC,SAAiC,CAAjC;EACA,OAAOC,SAAS,CAATA,WAAAA,CAAP,EAAOA,CAAP;AACD;AAED,OAAO,SAAA,eAAA,GAAwC;EAC7C,OAAA,EAAA;AACD;AAED,OAAO,SAAA,sBAAA,CAAA,KAAA,EAAA,SAAA,EAGL;EACA,KAAK,MAAL,GAAA,IAAA,KAAA,EAAyB;IACvB,MAAMC,GAAG,GAAGC,KAAK,CAAjB,GAAiB,CAAjB;;IACA,IAAIC,GAAG,KAAHA,eAAAA,IAA2B,OAAA,GAAA,KAA/B,QAAA,EAAwD;MACtDD,KAAK,CAALA,aAAAA,GAAsBF,SAAS,CAATA,eAAAA,CAAtBE,GAAsBF,CAAtBE;MACA;IACD;;IACD,IAAIC,GAAG,KAAHA,YAAAA,IAAwB,OAAA,GAAA,KAA5B,QAAA,EAAqD;MACnD,IAAIC,KAAK,CAALA,OAAAA,CAAJ,GAAIA,CAAJ,EAAwB;QACtB,IAAIC,MAAM,GAAV,EAAA;;QACA,KAAK,MAAL,IAAA,IAAA,GAAA,EAAwB;UACtB,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;YAC5BA,MAAM,IAAK,GAAEL,SAAS,CAATA,cAAAA,CAAAA,IAAAA,CAAbK,GAAAA;UADF,CAAA,MAEO,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;YACnCA,MAAM,IAAK,GAAEC,IAAbD,GAAAA;UACD;QACF;;QACDH,KAAK,CAALA,UAAAA,GAAmBG,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAgB,CAAnCH,CAAmBG,CAAnBH;QACA;MAVF,CAAA,MAWO,IAAID,GAAG,KAAK,KAAZ,CAAA,EAAoB;QACzB;MADK,CAAA,MAEA;QACLC,KAAK,CAALA,UAAAA,GAAmBF,SAAS,CAATA,cAAAA,CAAnBE,GAAmBF,CAAnBE;QACA;MACD;IACF;;IACD,IAAI,OAAA,GAAA,KAAA,QAAA,IAA2BD,GAAG,KAAlC,IAAA,EAA6C;MAC3CF,sBAAsB,CAAA,GAAA,EAAtBA,SAAsB,CAAtBA;IACD;EACF;;EACD,OAAA,KAAA;AACD","sourcesContent":["import type {\n  Properties,\n  FontFace as FontFaceObject,\n  KeyframesObject,\n} from \"./style-types\";\n\nexport type {FontFaceObject, KeyframesObject};\n\nexport type StyleObject = Properties & {\n  [key in string]: Properties[keyof Properties] | StyleObject;\n};\n\nexport interface StandardEngine {\n  renderStyle(style: StyleObject): string;\n  renderKeyframes(keyframes: KeyframesObject): string;\n  renderFontFace(fontFace: FontFaceObject): string;\n}\n\nexport function driver(style: StyleObject, styletron: StandardEngine): string {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): StyleObject {\n  return {};\n}\n\nexport function renderDeclarativeRules(\n  style: StyleObject,\n  styletron: StandardEngine,\n) {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val as any);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace(font as any)},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val as any);\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val as StyleObject, styletron);\n    }\n  }\n  return style;\n}\n"]},"metadata":{},"sourceType":"module"}